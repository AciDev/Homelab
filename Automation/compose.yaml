services:
  n8n-postgres:
    container_name: n8n-postgres
    image: postgres:alpine
    restart: unless-stopped
    volumes:
      - type: bind
        source: ./../Docker-data/Automation/N8N/postgres
        target: /var/lib/postgresql/data
    environment:
      - POSTGRES_DB=n8n
      - POSTGRES_USER=${N8N_PSQL_USER}
      - POSTGRES_PASSWORD=${N8N_PSQL_PASS}
    networks:
      - proxy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 10

  n8n:
    container_name: n8n
    image: docker.n8n.io/n8nio/n8n
    restart: unless-stopped
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=n8n-postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=${N8N_PSQL_USER}
      - DB_POSTGRESDB_PASSWORD=${N8N_PSQL_PASS}
      - N8N_SECURE_COOKIE=false
      - N8N_DEFAULT_LOCALE=${N8N_LOCALE}
      - GENERIC_TIMEZONE=${CONTAINER_TZ}
      - WEBHOOK_URL=https://n8n.${SERVER_DOMAIN}/
    volumes:
      - type: bind
        source: ./../Docker-data/Automation/N8N/data
        target: /home/node/.n8n
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.entrypoints=http"
      - "traefik.http.routers.n8n.rule=Host(`n8n.${SERVER_DOMAIN}`)"
      - "traefik.http.middlewares.n8n-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.n8n.middlewares=n8n-https-redirect"
      - "traefik.http.routers.n8n-secure.entrypoints=https"
      - "traefik.http.routers.n8n-secure.rule=Host(`n8n.${SERVER_DOMAIN}`)"
      - "traefik.http.routers.n8n-secure.tls=true"
      - "traefik.http.routers.n8n-secure.service=n8n"
      - "traefik.http.services.n8n.loadbalancer.server.scheme=http" 
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
      - "traefik.docker.network=proxy"
    networks:
      - proxy
    depends_on:
      n8n-postgres:
        condition: service_healthy

  kestra-postgres:
    container_name: kestra-postgres
    image: postgres:alpine
    restart: unless-stopped
    volumes:
      - type: bind
        source: ./../Docker-data/Automation/Kestra/postgres
        target: /var/lib/postgresql/data
    environment:
      - POSTGRES_DB=kestra
      - POSTGRES_USER=${KESTRA_PSQL_USER}
      - POSTGRES_PASSWORD=${KESTRA_PSQL_PASS}
    networks:
      - proxy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 10

  kestra:
    image: kestra/kestra:latest
    user: "root"
    command: server standalone
    restart: unless-stopped
    volumes:
      - type: bind
        source: ./../Docker-data/Automation/Kestra/data
        target: /app/storage
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
      - type: bind
        source: /tmp/kestra-wd
        target: /tmp/kestra-wd
    environment:
      KESTRA_CONFIGURATION: |
        datasources:
          postgres:
            url: jdbc:postgresql://kestra-postgres:5432/kestra
            driverClassName: org.postgresql.Driver
            username: ${KESTRA_PSQL_USER}
            password: ${KESTRA_PSQL_PASS}
        kestra:
          server:
            basic-auth:
              enabled: true
              username: "${KESTRA_EMAIL}"
              password: ${KESTRA_PASS}
          repository:
            type: postgres
          storage:
            type: local
            local:
              base-path: "/app/storage"
          queue:
            type: postgres
          tasks:
            tmp-dir:
              path: /tmp/kestra-wd/tmp
          url: https://kestra.${SERVER_DOMAIN}/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kestra-secure.entrypoints=https"
      - "traefik.http.routers.kestra-secure.rule=Host(`kestra.${SERVER_DOMAIN}`)"
      - "traefik.http.routers.kestra-secure.tls=true"
      - "traefik.http.routers.kestra-secure.service=kestra"
      - "traefik.http.services.kestra.loadbalancer.server.scheme=http" 
      - "traefik.http.services.kestra.loadbalancer.server.port=8080"
      - "traefik.http.routers.kestra-m-secure.entrypoints=https"
      - "traefik.http.routers.kestra-m-secure.rule=Host(`kestra-m.${SERVER_DOMAIN}`)"
      - "traefik.http.routers.kestra-m-secure.tls=true"
      - "traefik.http.routers.kestra-m-secure.service=kestra-m"
      - "traefik.http.services.kestra-m.loadbalancer.server.scheme=http" 
      - "traefik.http.services.kestra-m.loadbalancer.server.port=8081"
      - "traefik.docker.network=proxy"
    networks:
      - proxy
    depends_on:
      kestra-postgres:
        condition: service_healthy

networks:
  proxy:
    external: true