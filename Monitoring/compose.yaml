services:
  grafana:
    container_name: grafana
    image: grafana/grafana-oss:main-ubuntu
    user: "0"
    networks:
      - proxy
    ports:
      - 3040:3000
    volumes:
      - type: bind
        source: ./../Docker-data/Monitoring/Grafana/data
        target: /var/lib/grafana
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana-secure.entrypoints=https"
      - "traefik.http.routers.grafana-secure.rule=Host(`grafana.${SERVER_DOMAIN}`)"
      - "traefik.http.routers.grafana-secure.tls=true"
      - "traefik.http.routers.grafana-secure.service=grafana"
      - "traefik.http.services.grafana.loadbalancer.server.scheme=http" 
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.docker.network=proxy"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - 9090:9090
    volumes:
      - type: bind
        source: ./../Docker-data/Monitoring/Prometheus/root
        target: /prometheus
      - type: bind
        source: ./../Docker-data/Monitoring/Prometheus/data/prometheus.yml
        target: /etc/prometheus/prometheus.yml
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus-secure.entrypoints=https"
      - "traefik.http.routers.prometheus-secure.rule=Host(`prometheus.${SERVER_DOMAIN}`)"
      - "traefik.http.routers.prometheus-secure.tls=true"
      - "traefik.http.routers.prometheus-secure.service=prometheus"
      - "traefik.http.services.prometheus.loadbalancer.server.scheme=http" 
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.docker.network=proxy"

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.rootfs=/host'
    network_mode: host
    pid: host
    restart: unless-stopped
    volumes:
      - type: bind
        source: /
        target: /host
        read_only: true
        bind:
          propagation: rslave

  influxdb:
    container_name: influxdb
    image: influxdb:latest
    restart: unless-stopped
    ports:
      - 8086:8086
      - 8089:8089/udp
    networks:
      - proxy
    volumes:
      - type: bind
        source: ./../Docker-data/Monitoring/InfluxDB/data
        target: /var/lib/influxdb2
      - type: bind
        source: ./../Docker-data/Monitoring/InfluxDB/etc
        target: /etc/influxdb2
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.influxdb-secure.entrypoints=https"
      - "traefik.http.routers.influxdb-secure.rule=Host(`influxdb.${SERVER_DOMAIN}`)"
      - "traefik.http.routers.influxdb-secure.tls=true"
      - "traefik.http.routers.influxdb-secure.service=influxdb"
      - "traefik.http.services.influxdb.loadbalancer.server.scheme=http" 
      - "traefik.http.services.influxdb.loadbalancer.server.port=8086"
      - "traefik.docker.network=proxy"

  telegraf:
    container_name: telegraf
    image: telegraf:latest
    restart: unless-stopped
    user: "telegraf:${DOCKER_GROUP}"
    volumes:
        - type: bind
          source: ./../Docker-data/Monitoring/Telegraf/data/telegraf.conf
          target: /etc/telegraf/telegraf.conf
          read_only: true
        - type: bind
          source: /
          target: /hostfs
          read_only: true
        - type: bind
          source: /var/run/docker.sock
          target: /var/run/docker.sock
    environment:
        - HOST_ETC=/hostfs/etc
        - HOST_PROC=/hostfs/proc
        - HOST_SYS=/hostfs/sys
        - HOST_VAR=/hostfs/var
        - HOST_RUN=/hostfs/run
        - HOST_MOUNT_PREFIX=/hostfs
    networks:
      - proxy

  netdata:
    image: netdata/netdata:stable
    container_name: netdata
    pid: host
    network_mode: host
    restart: unless-stopped
    cap_add:
      - SYS_PTRACE
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    volumes:
      - type: bind
        source: ./../Docker-data/Monitoring/Netdata/lib
        target: /var/lib/netdata
      - type: bind
        source: ./../Docker-data/Monitoring/Netdata/cache
        target: /var/cache/netdata
      - type: bind
        source: ./../Docker-data/Monitoring/Netdata/config
        target: /etc/netdata
      - type: bind
        source: /
        target: /host/root
        read_only: true
        bind:
          propagation: rslave
      - type: bind
        source: /etc/passwd
        target: /host/etc/passwd
        read_only: true
      - type: bind
        source: /etc/group
        target: /host/etc/group
        read_only: true
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
      - type: bind
        source: /proc
        target: /host/proc
        read_only: true
      - type: bind
        source: /sys
        target: /host/sys
        read_only: true
      - type: bind
        source: /etc/os-release
        target: /host/etc/os-release
        read_only: true
      - type: bind
        source: /var/log
        target: /host/var/log
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    env_file:
      - Monitoring.env

networks:
  proxy:
    external: true